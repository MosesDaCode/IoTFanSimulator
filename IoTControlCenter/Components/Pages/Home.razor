@page "/"
@using IoTControlCenter.ViewModels
@using Shared.Models
@inject HomeViewModel viewModel
 <div class="container">
     <h1 class="headline">DEVICES</h1>

     <div class="devices">
        @if (Devices != null)
        {
            foreach(var device in Devices)
            {
                var icon = device.deviceType.ToLower() switch
                {
                    "light" => "fa-regular fa-lightbulb",
                    _ => "fa-regular fa-microchip" 
                };




                <div id="@device.deviceId" class="device  @(device.DeviceState ? "active" : null)"> 
                    <div class="body">
                        <i class="@icon"></i>
                        <div class="title">@device.DeviceState</div>
                        <div class="state">@(device.ConnectionState ? "Connected" : "Connecting...")</div>
                    </div>
                    <footer>
                        <label class="switch">
                            <InputCheckbox @bind-Value="device.DeviceState" @onclick="() => viewModel.OnDeviceStateChanged(device)" disabled="@(device.ConnectionState == false)"/>
                            <span class="slider round"></span>
                        </label>
                    </footer>
                </div>
            }
        }
        else
        {
            <div class="preloader">
                <i class="fa-solid fa-spinner-third fa-spin"></i>
            </div>
        }
    </div>
 </div>


@code{
    private IEnumerable<DeviceSettings> Devices = [];

    protected override async Task OnInitializedAsync()
    {
        Devices = await viewModel.GetDevicesAsync();
        viewModel.Timer = new Timer(async _ => await SetDevicesAsync(), null, 0, viewModel.TimeInterval);
    }

    private async Task SetDevicesAsync()
    {
        Devices = await viewModel.GetDevicesAsync();
        await InvokeAsync(StateHasChanged);
    }
}